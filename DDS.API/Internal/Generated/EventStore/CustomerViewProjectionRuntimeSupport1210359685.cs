// <auto-generated/>
#pragma warning disable
using DDS.Modules.Customers.Application.Projections;
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: CustomerViewProjectionLiveAggregation1210359685
    public class CustomerViewProjectionLiveAggregation1210359685 : Marten.Events.Aggregation.SyncLiveAggregatorBase<DDS.Modules.Customers.Application.Models.CustomerView>
    {
        private readonly DDS.Modules.Customers.Application.Projections.CustomerViewProjection _customerViewProjection;

        public CustomerViewProjectionLiveAggregation1210359685(DDS.Modules.Customers.Application.Projections.CustomerViewProjection customerViewProjection)
        {
            _customerViewProjection = customerViewProjection;
        }



        public override DDS.Modules.Customers.Application.Models.CustomerView Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, DDS.Modules.Customers.Application.Models.CustomerView snapshot)
        {
            if (!events.Any()) return null;
            DDS.Modules.Customers.Application.Models.CustomerView customerView = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public DDS.Modules.Customers.Application.Models.CustomerView Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<DDS.Modules.Customers.Domain.Events.CustomerCreatedDomainEvent> event_CustomerCreatedDomainEvent1:
                    return _customerViewProjection.Create(event_CustomerCreatedDomainEvent1.Data);
                    break;
            }

            return null;
        }


        public DDS.Modules.Customers.Application.Models.CustomerView CreateDefault(Marten.Events.IEvent @event)
        {
            return new DDS.Modules.Customers.Application.Models.CustomerView();
        }


        public DDS.Modules.Customers.Application.Models.CustomerView Apply(Marten.Events.IEvent @event, DDS.Modules.Customers.Application.Models.CustomerView aggregate, Marten.IQuerySession session)
        {
            return aggregate;
        }

    }

    // END: CustomerViewProjectionLiveAggregation1210359685
    
    
    // START: CustomerViewProjectionInlineHandler1210359685
    public class CustomerViewProjectionInlineHandler1210359685 : Marten.Events.Aggregation.AggregationRuntime<DDS.Modules.Customers.Application.Models.CustomerView, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<DDS.Modules.Customers.Application.Models.CustomerView, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<DDS.Modules.Customers.Application.Models.CustomerView, System.Guid> _storage;
        private readonly DDS.Modules.Customers.Application.Projections.CustomerViewProjection _customerViewProjection;

        public CustomerViewProjectionInlineHandler1210359685(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<DDS.Modules.Customers.Application.Models.CustomerView, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<DDS.Modules.Customers.Application.Models.CustomerView, System.Guid> storage, DDS.Modules.Customers.Application.Projections.CustomerViewProjection customerViewProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _customerViewProjection = customerViewProjection;
        }



        public override async System.Threading.Tasks.ValueTask<DDS.Modules.Customers.Application.Models.CustomerView> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<DDS.Modules.Customers.Application.Models.CustomerView, System.Guid> slice, Marten.Events.IEvent evt, DDS.Modules.Customers.Application.Models.CustomerView aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<DDS.Modules.Customers.Domain.Events.CustomerCreatedDomainEvent> event_CustomerCreatedDomainEvent3:
                    aggregate = _customerViewProjection.Create(event_CustomerCreatedDomainEvent3.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public DDS.Modules.Customers.Application.Models.CustomerView Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<DDS.Modules.Customers.Domain.Events.CustomerCreatedDomainEvent> event_CustomerCreatedDomainEvent2:
                    return _customerViewProjection.Create(event_CustomerCreatedDomainEvent2.Data);
                    break;
            }

            return null;
        }


        public DDS.Modules.Customers.Application.Models.CustomerView CreateDefault(Marten.Events.IEvent @event)
        {
            return new DDS.Modules.Customers.Application.Models.CustomerView();
        }

    }

    // END: CustomerViewProjectionInlineHandler1210359685
    
    
}

